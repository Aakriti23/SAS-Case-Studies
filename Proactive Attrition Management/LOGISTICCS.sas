/*********************** LOGISTIC REGRESSION CASE STUDY ******************************/


/******* Setting the library name and importing the data **********/

LIBNAME class '/folders/myfolders/del';



PROC IMPORT DATAFILE='/folders/myfolders/del/Proactive Attrition Management-Logistic Regression Case Study.csv' OUT=LOGIS DBMS=CSV REPLACE;
GUESSINGROWS=6000;
RUN;

ods html file='/folders/myfolders/contents.xls';
PROC CONTENTS DATA= LOGIS VARNUM;
RUN;
ods html close;

/************** Removing unwanted variables ***************/

DATA LOGIS;
SET LOGIS;
DROP RETCALLS RETACCPT RETCALL CHURNDEP;
RUN;



/************ Missing value treatment-Imputing with mean ****************/

DATA SETPRCM;
SET LOGIS;
WHERE SETPRCM=1; /** Around 40k missing values, hence deleting **/
RUN;

DATA SETPRCM;
SET LOGIS;
WHERE INCMISS=1; /** Around 17k missing values**/
RUN;


PROC MEANS DATA=LOGIS MEAN;
VAR INCOME;
WHERE INCOME NE 0; /** 5.7776986 **/
RUN;


PROC MEANS DATA=LOGIS NMISS MEAN MEDIAN MODE;
RUN;


DATA LOGIS;
SET LOGIS(DROP= SETPRC SETPRCM INCMISS);
IF REVENUE=. THEN REVENUE=58.8539614;
IF MOU=. THEN MOU=525.7283924;
IF RECCHRGE=. THEN RECCHRGE=46.8764916;
IF DIRECTAS=. THEN DIRECTAS=0.8948011;
IF OVERAGE=. THEN OVERAGE=40.0953598;
IF ROAM=. THEN ROAM=1.2215262;
IF CHANGEM=. THEN CHANGEM=-10.8464614;
IF CHANGER=. THEN CHANGER=-1.2059256;
IF AGE1=. THEN AGE1=31.3751128;
IF AGE2=. THEN AGE2=21.1577153;
IF PHONES=. THEN PHONES=2;
IF MODELS=. THEN MODELS=1;
IF EQPDAYS=. THEN EQPDAYS=380;
RUN;

DATA LOGIS;
SET LOGIS;
IF INCOME=0 THEN INCOME=6;
RUN;

/******************* Outlier treatment ***********************/

ODS HTML FILE='/folders/myfolders/means.xls';
PROC MEANS DATA=LOGIS N NMISS MEAN STD MIN P1 P5 P10 P25 P50 P75 P90 P95 P99 MAX;
RUN;
ODS HTML CLOSE;


/*** CAPPING THE OUTLIERS AT MEAN + 3STD ***/

DATA LOGIS(DROP=CSA CUSTOMER TRUCK RV);
SET LOGIS;
IF REVENUE>191.3828776 THEN REVENUE=191.3828776 ;
IF MOU>2113.7116919 THEN MOU=2113.7116919 ;
IF RECCHRGE>118.5126546 THEN RECCHRGE=118.5126546 ;
IF DIRECTAS>7.4782147 THEN DIRECTAS=7.4782147 ;
IF OVERAGE>328.6969513 THEN OVERAGE=328.6969513 ;
IF ROAM>28.4236689 THEN ROAM=28.4236689 ;
IF CHANGEM>752.385671 THEN CHANGEM=752.385671 ;
IF CHANGER>114.6945105 THEN CHANGER=114.6945105 ;
IF DROPVCE>33.028451 THEN DROPVCE=33.028451 ;
IF BLCKVCE>36.0801631 THEN BLCKVCE=36.0801631 ;
IF UNANSVCE>145.0685958 THEN UNANSVCE=145.0685958 ;
IF CUSTCARE>17.3482106 THEN CUSTCARE=17.3482106 ;
IF THREEWAY>3.7847449 THEN THREEWAY=3.7847449 ;
IF MOUREC>613.8524722 THEN MOUREC=613.8524722 ;
IF OUTCALLS>130.8390756 THEN OUTCALLS=130.8390756 ;
IF INCALLS>57.7340372 THEN INCALLS=57.7340372 ;
IF PEAKVCE>405.3255773 THEN PEAKVCE=405.3255773 ;
IF OPEAKVCE>347.8053877 THEN OPEAKVCE=347.8053877 ;
IF DROPBLK>56.5315408 THEN DROPBLK=56.5315408 ;
IF CALLFWDV>1.6984129 THEN CALLFWDV=1.6984129 ;
IF CALLWAIT>18.5216543 THEN CALLWAIT=18.5216543 ;
IF MONTHS>48.1135324 THEN MONTHS=48 ;
IF UNIQSUBS>4.9248729 THEN UNIQSUBS=5 ;
IF ACTVSUBS>3.3318024 THEN ACTVSUBS=3 ;
IF PHONES>5.8169526 THEN PHONES=6 ;
IF MODELS>4.2866125 THEN MODELS=4 ;
IF EQPDAYS>1143.1443351 THEN EQPDAYS=1143 ;
IF AGE1>97.0391548 THEN AGE1=97 ;
IF AGE2>92.27951 THEN AGE2=92 ;
IF REFER>0.9221848 THEN REFER=0.9221848 ;
IF CREDITAD>1.1781263 THEN CREDITAD=1.1781263 ;

IF REVENUE<10 THEN REVENUE=10;
IF RECCHRGE<9.19 THEN RECCHRGE=9.19;
IF CHANGEM<-830 THEN CHANGEM=-830;
IF CHANGER<-104.15 THEN CHANGER=-104.15;
IF EQPDAYS<7 THEN EQPDAYS=7;
RUN;



/*************** Correlation matrix for continuous variables ***************/

proc contents data= logis varnum;
run;


PROC CORR DATA=LOGIS;
VAR REVENUE
MOU
RECCHRGE
DIRECTAS
OVERAGE
ROAM
CHANGEM
CHANGER
DROPVCE
BLCKVCE
UNANSVCE
CUSTCARE
THREEWAY
MOUREC
OUTCALLS
INCALLS
PEAKVCE
OPEAKVCE
DROPBLK
CALLFWDV
CALLWAIT
MONTHS
UNIQSUBS
ACTVSUBS
PHONES
MODELS
EQPDAYS
AGE1
AGE2
CHILDREN
REFER
INCOME
;
RUN;


/************* Performing factor analysis ****************/
/*** 10 FACTORS-EIGENVALUE-0.9915, VARIANCE EXPLAINED-71.26% ***/

PROC FACTOR data=LOGIS
METHOD = PRINCIPAL SCREE MINEIGEN=0 NFACTOR = 10
ROTATE = VARIMAX REORDER OUT= Factor;
var REVENUE
MOU
RECCHRGE
DIRECTAS
OVERAGE
ROAM
CHANGEM
CHANGER
DROPVCE
BLCKVCE
UNANSVCE
CUSTCARE
THREEWAY
MOUREC
OUTCALLS
INCALLS
PEAKVCE
OPEAKVCE
DROPBLK
CALLFWDV
CALLWAIT
MONTHS
UNIQSUBS
ACTVSUBS
PHONES
MODELS
EQPDAYS
AGE1
AGE2
CHILDREN
REFER
INCOME
;
RUN;



/**************** Performing Chi-square for categorical variables ***************/
PROC FREQ DATA=LOGIS;
TABLES CHURN*(CREDITA
CREDITAA
CREDITB
CREDITC
CREDITDE
CREDITGY
CREDITZ
PRIZMRUR
PRIZMUB
PRIZMTWN
REFURB
WEBCAP
OCCPROF
OCCCLER
OCCCRFT
OCCSTUD
OCCHMKR
OCCRET
OCCSELF
OWNRENT
MARRYUN
MARRYYES
MARRYNO
MAILORD
MAILRES
MAILFLAG
TRAVEL
PCOWN
CREDITCD
NEWCELLY
NEWCELLN
MCYCLE
CREDITAD)/CHISQ NOCOL NOPERCENT NOROW;
RUN;

/*** DROPPING CREDGY(0.47) CREDITZ(0.88) OCCCLER(0.45) OCCSTUD(0.75) OCCHMKR(0.30) OCCSELF(0.27) MARRYYES(0.21)***/
/* MAILFLAG(0.88) TRAVEL(0.29) PCOWN(0.21) ***/


/**** CHECKING LINEARITY ASSUMPTIONS BETWEEN CONTINUOUS INDEPENDENT VARIABLES AND THE DEPENDENT VARIABLE ***/

PROC UNIVARIATE DATA=CLASS.LOGIS;
VAR REVENUE MOU RECCHRGE DIRECTAS OVERAGE ROAM CHANGEM CHANGER DROPVCE BLCKVCE UNANSVCE CUSTCARE THREEWAY MOUREC
OUTCALLS INCALLS PEAKVCE OPEAKVCE DROPBLK CALLFWDV CALLWAIT MONTHS UNIQSUBS ACTVSUBS PHONES MODELS EQPDAYS
AGE1 AGE2 REFER INCOME CREDITAD SETPRC
;
HISTOGRAM;
RUN;

DATA LOGIS1;
SET LOGIS;
IF REVENUE NE 0 THEN REVENUE=LOG(REVENUE); ELSE REVENUE=LOG(REVENUE+1);
IF MOU NE 0 THEN MOU=LOG(MOU); ELSE MOU=LOG(MOU+1);
/* IF DIRECTAS NE 0 THEN DIRECTAS=LOG(DIRECTAS); ELSE DIRECTAS=LOG(DIRECTAS+1); */
/* IF OVERAGE NE 0 THEN OVERAGE=LOG(OVERAGE); ELSE OVERAGE=LOG(OVERAGE+1); */
/* IF ROAM NE 0 THEN ROAM=LOG(ROAM); ELSE ROAM=LOG(ROAM+1); */
/* IF DROPVCE NE 0 THEN DROPVCE=LOG(DROPVCE); ELSE DROPVCE=LOG(DROPVCE+1); */
/* IF BLCKVCE NE 0 THEN BLCKVCE=LOG(BLCKVCE); ELSE BLCKVCE=LOG(BLCKVCE+1); */
IF UNANSVCE NE 0 THEN UNANSVCE=LOG(UNANSVCE); ELSE UNANSVCE=LOG(UNANSVCE+1);
/* IF CUSTCARE NE 0 THEN CUSTCARE=LOG(CUSTCARE); ELSE CUSTCARE=LOG(CUSTCARE+1); */
IF MOUREC NE 0 THEN MOUREC=LOG(MOUREC); ELSE MOUREC=LOG(MOUREC+1);
/* IF OUTCALLS NE 0 THEN OUTCALLS=LOG(OUTCALLS); ELSE OUTCALLS=LOG(OUTCALLS+1); */
/* IF INCALLS NE 0 THEN INCALLS=LOG(INCALLS); ELSE INCALLS=LOG(INCALLS+1); */
IF PEAKVCE NE 0 THEN PEAKVCE=LOG(PEAKVCE); ELSE PEAKVCE=LOG(PEAKVCE+1);
IF OPEAKVCE NE 0 THEN OPEAKVCE=LOG(OPEAKVCE); ELSE OPEAKVCE=LOG(OPEAKVCE+1);
/* IF DROPBLK NE 0 THEN DROPBLK=LOG(DROPBLK); ELSE DROPBLK=LOG(DROPBLK+1); */
/* IF CALLWAIT NE 0 THEN CALLWAIT=LOG(CALLWAIT); ELSE CALLWAIT=LOG(CALLWAIT+1); */
/* IF MONTHS NE 0 THEN MONTHS=LOG(MONTHS); ELSE MONTHS= LOG(MONTHS+1); */
IF EQPDAYS NE 0 THEN EQPDAYS=LOG(EQPDAYS); ELSE EQPDAYS=LOG(EQPDAYS+1);
RUN;



PROC MEANS DATA=LOGIS1 NMISS;
RUN;

/*** RECHECKING THE DISTRIBUTIONS AFTER TRANSFORMATION ****/ 
PROC UNIVARIATE DATA=LOGIS1;
VAR REVENUE MOU DIRECTAS OVERAGE ROAM  DROPVCE BLCKVCE UNANSVCE CUSTCARE MOUREC OUTCALLS INCALLS PEAKVCE
	OPEAKVCE DROPBLK CALLWAIT MONTHS EQPDAYS;
HISTOGRAM;
RUN;

DATA LOGIS;
SET LOGIS;
IF REVENUE NE 0 THEN REVENUE=LOG(REVENUE); ELSE REVENUE=LOG(REVENUE+1);
IF MOU NE 0 THEN MOU=LOG(MOU); ELSE MOU=LOG(MOU+1);
/* IF DIRECTAS NE 0 THEN DIRECTAS=LOG(DIRECTAS); ELSE DIRECTAS=LOG(DIRECTAS+1); */
/* IF OVERAGE NE 0 THEN OVERAGE=LOG(OVERAGE); ELSE OVERAGE=LOG(OVERAGE+1); */
/* IF ROAM NE 0 THEN ROAM=LOG(ROAM); ELSE ROAM=LOG(ROAM+1); */
/* IF DROPVCE NE 0 THEN DROPVCE=LOG(DROPVCE); ELSE DROPVCE=LOG(DROPVCE+1); */
/* IF BLCKVCE NE 0 THEN BLCKVCE=LOG(BLCKVCE); ELSE BLCKVCE=LOG(BLCKVCE+1); */
IF UNANSVCE NE 0 THEN UNANSVCE=LOG(UNANSVCE); ELSE UNANSVCE=LOG(UNANSVCE+1);
/* IF CUSTCARE NE 0 THEN CUSTCARE=LOG(CUSTCARE); ELSE CUSTCARE=LOG(CUSTCARE+1); */
IF MOUREC NE 0 THEN MOUREC=LOG(MOUREC); ELSE MOUREC=LOG(MOUREC+1);
/* IF OUTCALLS NE 0 THEN OUTCALLS=LOG(OUTCALLS); ELSE OUTCALLS=LOG(OUTCALLS+1); */
/* IF INCALLS NE 0 THEN INCALLS=LOG(INCALLS); ELSE INCALLS=LOG(INCALLS+1); */
IF PEAKVCE NE 0 THEN PEAKVCE=LOG(PEAKVCE); ELSE PEAKVCE=LOG(PEAKVCE+1);
IF OPEAKVCE NE 0 THEN OPEAKVCE=LOG(OPEAKVCE); ELSE OPEAKVCE=LOG(OPEAKVCE+1);
/* IF DROPBLK NE 0 THEN DROPBLK=LOG(DROPBLK); ELSE DROPBLK=LOG(DROPBLK+1); */
/* IF CALLWAIT NE 0 THEN CALLWAIT=LOG(CALLWAIT); ELSE CALLWAIT=LOG(CALLWAIT+1); */
/* IF MONTHS NE 0 THEN MONTHS=LOG(MONTHS); ELSE MONTHS= LOG(MONTHS+1); */
IF EQPDAYS NE 0 THEN EQPDAYS=LOG(EQPDAYS); ELSE EQPDAYS=LOG(EQPDAYS+1);
RUN;


/************* Splitting the data into training and testing samples ***************/

DATA TEST;
SET LOGIS;
WHERE calibrat=1;
RUN;

DATA VALID;
SET LOGIS;
WHERE calibrat=0;
RUN;

/****** Iteration 1-Using all the variables ********/

PROC CONTENTS DATA=TEST VARNUM;
RUN;

ods pdf file='/folders/myfolders/log';
PROC LOGISTIC data = TEST descending /*by default it models for zero(ascending option)*/ 
outest=model;
MODEL CHURN=
REVENUE
MOU
RECCHRGE
DIRECTAS
OVERAGE
ROAM
CHANGEM
CHANGER
DROPVCE
BLCKVCE
UNANSVCE
CUSTCARE
THREEWAY
MOUREC
OUTCALLS
INCALLS
PEAKVCE
OPEAKVCE
DROPBLK
CALLFWDV
CALLWAIT
MONTHS
UNIQSUBS
ACTVSUBS
PHONES
MODELS
EQPDAYS
AGE1
AGE2
CHILDREN
CREDITA
CREDITAA
CREDITB
CREDITC
CREDITDE
CREDITGY
CREDITZ
PRIZMRUR
PRIZMUB
PRIZMTWN
REFURB
WEBCAP
OCCPROF
OCCCLER
OCCCRFT
OCCSTUD
OCCHMKR
OCCRET
OCCSELF
OWNRENT
MARRYUN
MARRYYES
MARRYNO
MAILORD
MAILRES
MAILFLAG
TRAVEL
PCOWN
CREDITCD
NEWCELLY
NEWCELLN
REFER
INCOME
MCYCLE
CREDITAD/Selection=stepwise slentry=.1 slstay=0.1 stb lackfit;
output out =tmp p=newpred;
run;


/****** Iteration 2-Removing the less significant variables(Based on Factor analysis, Correlation Matrix etc) ********/
PROC LOGISTIC data = TEST descending /*by default it models for zero(ascending option)*/ 
outest=model;
MODEL CHURN=
REVENUE
MOU
RECCHRGE
DIRECTAS
OVERAGE
ROAM
CHANGEM
CHANGER
DROPVCE
BLCKVCE
UNANSVCE
/* CUSTCARE */
THREEWAY
/* MOUREC */
/* OUTCALLS */
INCALLS
PEAKVCE
/* OPEAKVCE */
DROPBLK
CALLFWDV
CALLWAIT
MONTHS
UNIQSUBS
/* ACTVSUBS */
PHONES
/* MODELS */
EQPDAYS
AGE1
/* AGE2 */
CHILDREN
CREDITA
CREDITAA
CREDITB
CREDITC
CREDITDE
/* CREDITGY */
/* CREDITZ */
PRIZMRUR
PRIZMUB
PRIZMTWN
REFURB
WEBCAP
OCCPROF
/* OCCCLER */
OCCCRFT
/* OCCSTUD */
/* OCCHMKR */
OCCRET
/* OCCSELF */
OWNRENT
/* MARRYUN */
MARRYYES
MARRYNO
MAILORD
MAILRES
/* MAILFLAG */
TRAVEL
PCOWN
/* CREDITCD */
NEWCELLY
NEWCELLN
REFER
INCOME
/* MCYCLE */
CREDITAD/ Selection=stepwise slentry=.1 slstay=0.1 stb lackfit; 
output out =tmp p=newpred;
run;


/****************** VALIDATION ****************************/



/************ Testing Sample **************/
DATA TEST1;
SET TEST;
ODDS_RATIO=EXP(-1.5402+((REVENUE*0.3963)+(MOU*-0.1472)+(RECCHRGE*-0.00864)+(OVERAGE*0.00067)+(ROAM*0.0126)+
			(CHANGEM*-0.00054)+(CHANGER*0.00221)+(DROPVCE*0.00736)+(UNANSVCE*0.0434)+(THREEWAY*-0.0758)+(INCALLS*-0.00404)+
			(PEAKVCE*-0.0619)+(DROPBLK*0.00593)+(MONTHS*-0.00852)+(UNIQSUBS*0.0846)+(PHONES*0.0763)+(EQPDAYS*0.2948)+
			(AGE1*-0.00452)+(CHILDREN*0.1034)+(CREDITC*-0.1636)+(CREDITDE*-0.3595)+(PRIZMUB*-0.0499)+(REFURB*0.256)+
			(WEBCAP*-0.2429)+(MARRYNO*-0.0478)+(MAILRES*-0.1288)+(NEWCELLY*-0.0774)+(INCOME*-0.0129)+(CREDITAD*-0.1743)));
Prob=(Odds_ratio/(1+Odds_ratio));
if prob >0.5 then Pred_default=1; else pred_default=0;
run;

proc freq data=TEST1; tables Pred_default;
run;

proc sort data=TEST1;
by descending PROB;
run;

proc rank data=TEST1 groups=10 out=TEST2;
var PROB;
ranks prob_decile;
run;

proc sql;
select prob_decile, count(prob_decile) as cnt,sum(churn) as default_cnt, min(PROB) as min_p, max(PROB) as max_p from TEST2
group by prob_decile order by prob_decile desc ;
quit;





/************* Validation Sample ************/
DATA VALID1;
SET VALID;
ODDS_RATIO=EXP(-1.5402+((REVENUE*0.3963)+(MOU*-0.1472)+(RECCHRGE*-0.00864)+(OVERAGE*0.00067)+(ROAM*0.0126)+
			(CHANGEM*-0.00054)+(CHANGER*0.00221)+(DROPVCE*0.00736)+(UNANSVCE*0.0434)+(THREEWAY*-0.0758)+(INCALLS*-0.00404)+
			(PEAKVCE*-0.0619)+(DROPBLK*0.00593)+(MONTHS*-0.00852)+(UNIQSUBS*0.0846)+(PHONES*0.0763)+(EQPDAYS*0.2948)+
			(AGE1*-0.00452)+(CHILDREN*0.1034)+(CREDITC*-0.1636)+(CREDITDE*-0.3595)+(PRIZMUB*-0.0499)+(REFURB*0.256)+
			(WEBCAP*-0.2429)+(MARRYNO*-0.0478)+(MAILRES*-0.1288)+(NEWCELLY*-0.0774)+(INCOME*-0.0129)+(CREDITAD*-0.1743)));
Prob=(Odds_ratio/(1+Odds_ratio));
if prob >0.5 then Pred_default=1; else pred_default=0;
run;

proc freq data=VALID1; tables Pred_default;
run;

proc sort data=VALID1;
by descending PROB;
run;

proc rank data=VALID1 groups=10 out=VALID2;
var PROB;
ranks prob_decile;
run;

proc sql;
select prob_decile, count(prob_decile) as cnt,sum(churn) as default_cnt, min(PROB) as min_p, max(PROB) as max_p from VALID2
group by prob_decile order by prob_decile desc ;
quit;

